/*
 * This class is used to demonstrate the neural network for given inputs
 * http://www.pirobot.org/blog/0007/
 * http://www4.rgu.ac.uk/files/chapter3%20-%20bp.pdf
 */
public class Nural {
	
	public static double[][] trainingData = {
		
		//Straight on (slight approach to right) turn right
			{-1, 75, 69, 63, -1, 0, 50, 50},
			{-1, 76, 69, 63, -1, 1, 50, 50},
			{-1, 76, 68, 63, -1, 0, 50, 50},
			{-1, 76, 68, 63, -1, 1, 50, 50},
			{-1, 75, 68, 63, -1, 1, 50, 50},
			{-1, 76, 68, 63, -1, 1, 50, 50},
			{-1, 75, 68, 63, -1, 1, 50, 50},
			{-1, 74, 68, 62, -1, 2, 50, 50},
			{-1, 75, 68, 62, -1, 2, 50, 50},
			{-1, 75, 68, 63, -1, 2, 50, 50},
			{-1, 72, 65, 60, -1, 2, 50, 50},
			{-1, 66, 59, 54, -1, 2, 50, 50},
			{-1, 58, 46, -1, -1, 2, 50, 50},
			{-1, 51, 40, -1, -1, 2, 50, 50},
			{-1, 44, 33, -1, -1, 2, 50, 50},
			{-1, 37, 26, -1, -1, 2, 65, 35},
			{-1, 25, 20, -1, -1, 2, 80, 20},
			{-1, 18, 18, 37, -1, 2, 95, 5},
			{-1, 11, -1, -1, -1, 2, 95, 5},
			{-1, 8, 24, -1, -1, 2, 80, 20},

		// Straight on (slight approach to left) turn left
			{-1, 76, 69, 64, -1, 0, 50, 50},
			{-1, 76, 69, 64, -1, 0, 50, 50},
			{-1, 76, 69, 64, -1, 0, 50, 50},
			{-1, 77, 69, 64, -1, 0, 50, 50},
			{-1, 77, 69, 64, -1, 1, 50, 50},
			{-1, 76, 69, 64, -1, 1, 50, 50},
			{-1, 76, 69, 64, -1, 1, 50, 50},
			{-1, 77, 69, 64, -1, 1, 50, 50},
			{-1, 77, 69, 64, -1, 1, 50, 50},
			{-1, 77, 69, 64, -1, 1, 50, 50},
			{-1, 76, 69, 64, -1, 1, 50, 50},
			{-1, 76, 69, 64, -1, 2, 50, 50},
			{-1, 76, 69, 64, -1, 2, 50, 50},
			{-1, 76, 69, 64, 73, 2, 50, 50},
			{-1, 77, 69, 63, -1, 2, 50, 50},
			{-1, 73, 65, 60, -1, 2, 50, 50},
			{-1, -1, 59, 54, -1, 2, 50, 50},
			{-1, -1, 53, 48, -1, 2, 50, 50},
			{-1, -1, 48, 42, -1, 2, 50, 50},
			{-1, -1, 41, 34, -1, 1, 50, 50},
			{-1, -1, 34, 28, -1, 1, 20, 80},
			{-1, -1, 27, 21, -1, 1, 5, 95},
			{-1, -1, 21, 16, 50, 1, 5, 95},
			{-1, -1, 18, 12, 50, 1, 5, 95},
			{-1, -1, 23, 11, 50, 1, 5, 95},
			{-1, -1, 23, 10, -1, 2, 5, 95},
			{-1, -1, 23, 11, -1, 2, 5, 95},
			{-1, -1, 23, 11, -1, 2, 5, 95},
			{-1, -1, 22, 13, -1, 2, 5, 95},
			{90, -1, 85, 12, -1, 2, 5, 95},
			{90, -1, 81, 75, 12, 2, 35, 65},
			{90, 84, -1, 75, 12, 2, 50, 50},
			{-1, 80, -1, 72, 12, 2, 50, 50},
			{-1, 76, 72, 106, 103, 2, 50, 50},

		// 45 to left (turn left)
			{71, 90, 66, 55, 107, 0, 50, 50},
			{71, 90, 73, 55, 55, 0, 50, 50},
			{-1, 90, 67, 55, 55, 1, 50, 50},
			{71, 90, 66, 55, 55, 1, 35, 65},
			{71, 90, 66, 55, 55, 1, 35, 65},
			{71, 90, 66, 59, 54, 1, 35, 65},
			{-1, 90, 67, 54, 54, 1, 35, 65},
			{71, 90, 65, 57, 107, 1, 50, 50},
			{71, 90, 65, 54, 107, 1, 50, 50},
			{71, 90, 65, 54, 107, 1, 50, 50},
			{-1, 89, 64, 57, 107, 1, 50, 50},
			{69, 89, 62, 50, 108, 2, 50, 50},
			{69, -1, 60, 52, 47, 1, 50, 50},
			{69, -1, 59, 51, 47, 1, 50, 50},
			{-1, -1, 57, 45, 47, 2, 50, 50},
			{88, -1, 55, 42, 110, 1, 50, 50},
			{88, -1, 54, 41, 110, 1, 50, 50},
			{88, -1, 53, 40, 110, 2, 50, 50},
			{-1, -1, 51, 38, 110, 1, 35, 65},
			{-1, -1, 49, 37, 111, 2, 50, 50},
			{-1, -1, 42, 35, 112, 2, 35, 65},
			{-1, -1, 46, 33, 112, 2, 35, 65},
			{-1, -1, 44, 32, 112, 2, 50, 50},
			{90, -1, 41, 29, 117, 2, 35, 65},
			{90, -1, 38, 21, 120, 2, 50, 50},
			{90, -1, 33, 21, 120, 2, 35, 65},
			{-1, -1, -1, 17, 120, 2, 20, 80},
			{93, -1, -1, 17, 15, 2, 20, 80},
			{93, -1, -1, 20, 13, 2, 5, 95},
			{93, -1, 111, -1, 13, 2, 35, 65},
			{-1, 88, -1, 99, 13, 2, 50, 50},
			{-1, 82, -1, -1, -1, 2, 50, 50},
			{-1, 77, -1, -1, -1, 2, 50, 50},
			{-1, 71, 67, -1, -1, 2, 65, 35},

		// 45 to right - turn right (over correct back to left)
			{78, 48, -1, -1, -1, 1, 50, 50},
			{78, 48, -1, -1, 107, 1, 50, 50},
			{-1, 48, -1, -1, 107, 2, 50, 50},
			{78, 48, -1, -1, 107, 2, 50, 50},
			{78, 48, -1, -1, 107, 2, 50, 50},
			{78, 46, -1, 113, 101, 2, 50, 50},
			{-1, 42, -1, -1, 101, 2, 50, 50},
			{20, 39, -1, -1, 101, 2, 35, 65},
			{20, 35, -1, 102, 94, 2, 35, 65},
			{20, 32, -1, 101, 94, 2, 35, 65},
			{-1, 28, -1, -1, 94, 2, 50, 50},
			{-1, 23, -1, -1, 98, 2, 80, 20},
			{-1, 17, -1, -1, 101, 2, 80, 20},
			{-1, 11, -1, -1, 101, 2, 95, 5},
			{-1, 9, -1, -1, 101, 2, 65, 35},
			{10, -1, -1, 95, 88, 2, 35, 65},
			{10, -1, 91, 81, -1, 2, 20, 80},
			{10, -1, 78, 71, -1, 2, 5, 95},
			{-1, -1, 78, 67, -1, 2, 20, 80},

		// Shallow approach to right wall, easy correction - 50 feet down hallway
			{84, -1, 79, -1, 30, 1, 50, 50},
			{-1, -1, 79, -1, 30, 2, 50, 50},
			{84, -1, 79, -1, 30, 2, 50, 50},
			{84, -1, 79, -1, -1, 2, 50, 50},
			{84, -1, 76, 25, 29, 2, 35, 65},
			{-1, -1, 71, 24, 29, 2, 35, 65},
			{75, -1, 65, -1, 29, 2, 35, 65},
			{75, -1, -1, -1, -1, 2, 50, 50},
			{75, 120, -1, 52, 21, 2, 50, 50},
			{-1, 74, -1, -1, 21, 2, 50, 50},
			{53, 72, -1, -1, 21, 2, 65, 35},
			{53, 70, -1, -1, -1, 2, 50, 50},
			{53, 68, 106, -1, 29, 2, 50, 50},
			{-1, 68, -1, -1, 29, 2, 50, 50},
			{48, 85, -1, -1, 29, 2, 50, 50},
			{48, 86, -1, -1, -1, 2, 50, 50},
			{48, 79, -1, 40, 32, 2, 50, 50},
			{-1, 76, -1, -1, 32, 2, 50, 50},
			{53, 70, -1, -1, 32, 2, 50, 50},
			{53, 68, -1, -1, -1, 2, 35, 65},
			{53, -1, -1, -1, 33, 2, 35, 65},
			{-1, -1, -1, 119, 33, 2, 50, 50},
			{43, 62, -1, 116, 33, 2, 50, 50},
			{43, 57, -1, 107, -1, 2, 65, 35},
			{43, 51, -1, 109, 97, 2, 65, 35},
			{-1, 46, -1, 99, 97, 2, 50, 50},
			{23, 42, -1, 93, 97, 2, 50, 50},
			{23, -1, -1, 86, -1, 2, 50, 50},
			{23, -1, 113, 61, 49, 2, 50, 50},
			{-1, -1, 104, 68, 49, 2, 50, 50},
			{105, 117, 73, 60, 49, 2, 35, 65},
			{105, 109, 84, 53, -1, 2, 35, 65},
			{105, 104, 71, 46, 44, 2, 50, 50},

		// Longer gentle trip down center of hallway - large right turn in hallway
			{-1, -1, -1, -1, 44, 2, 35, 65},
			{46, -1, -1, -1, 44, 2, 35, 65},
			{46, -1, -1, 57, 46, 2, 50, 50},
			{46, -1, -1, 59, 51, 2, 50, 50},
			{-1, -1, -1, -1, 51, 2, 50, 50},
			{44, 63, 120, -1, 51, 2, 50, 50},
			{44, -1, 115, -1, -1, 2, 50, 50},
			{44, -1, -1, 61, 53, 2, 50, 50},
			{-1, 113, -1, 67, 53, 2, 50, 50},
			{43, 64, -1, -1, 53, 2, 50, 50},
			{43, 100, -1, 59, 48, 2, 50, 50},
			{43, 97, -1, 59, 47, 2, 50, 50},
			{-1, 93, -1, 59, 47, 2, 50, 50},
			{45, 71, -1, 58, 47, 2, 35, 65},
			{45, 87, -1, 51, -1, 2, 50, 50},
			{45, 83, -1, 50, 44, 2, 35, 65},
			{-1, 78, -1, 50, 44, 2, 50, 50},
			{48, 77, -1, -1, 44, 2, 35, 65},
			{48, 73, -1, 54, 42, 2, 35, 65},
			{48, 70, -1, -1, 47, 2, 35, 65},
			{-1, 67, -1, -1, 47, 2, 50, 50},
			{49, 63, -1, -1, 47, 2, 50, 50},
			{49, 58, -1, -1, -1, 2, 50, 50},
			{49, 54, -1, 56, 49, 2, 50, 50},
			{-1, 54, -1, -1, 49, 2, 50, 50},
			{50, 70, -1, -1, 49, 2, 50, 50},
			{50, -1, -1, 56, 49, 2, 35, 65},
			{50, -1, -1, 56, 44, 2, 35, 65},
			{-1, -1, -1, 119, 44, 2, 50, 50},
			{47, 69, -1, 119, 44, 2, 50, 50},
			{47, -1, -1, 58, 50, 2, 50, 50},
			{47, -1, -1, 59, 51, 2, 50, 50},
			{-1, -1, -1, 99, 51, 2, 50, 50},
			{44, -1, -1, 99, 51, 2, 50, 50},
			{44, -1, 103, 90, -1, 2, 35, 65},
			{44, -1, 98, 59, 47, 2, 35, 65},
			{-1, -1, 122, 68, 47, 2, 35, 65},
			{44, 64, -1, 77, 47, 2, 50, 50},
			{44, -1, -1, 61, 53, 2, 50, 50},
			{44, 41, -1, 73, 56, 2, 50, 50},
			{-1, 39, 120, 102, 56, 2, 65, 35},
			{18, 37, 113, 97, 56, -1, 20, 80},
			{18, 35, 105, 93, 68, 1, 50, 50},
			{18, 103, 97, 77, 64, 2, 50, 50},
			{-1, 32, 92, -1, 64, 2, 50, 50},
			{13, 32, 90, -1, 64, 2, 65, 35},
			{13, 31, 87, 91, 68, 2, 80, 20},
			{13, 30, 85, 90, 73, 2, 65, 35},
			{-1, 29, 81, -1, 73, 2, 65, 35},
			{12, 49, 78, 80, 73, 2, 65, 35},
			{12, 80, 75, 78, 68, 2, 50, 50},
			{12, 71, -1, 74, 65, 2, 50, 50},
			{-1, 68, -1, 70, 65, 2, 50, 50},
			{32, 64, -1, 70, 65, 2, 50, 50},
			{32, 61, -1, 69, 62, 2, 50, 50},
			{32, 58, -1, 67, 60, 2, 50, 50},
			{-1, 55, -1, 64, 60, 2, 50, 50},
			{35, 53, -1, 60, 60, 2, 35, 65},
			{35, -1, -1, 57, 52, 2, 35, 65},
			{35, -1, -1, 55, 49, 2, 35, 65},
			{-1, -1, -1, 54, 49, 2, 35, 65},
			{48, 69, -1, 53, 49, 2, 35, 65},
			{48, 60, -1, 53, 46, 2, 50, 50},
			{48, 70, -1, 59, 47, 2, 50, 50},
			{-1, -1, -1, -1, 47, 2, 50, 50},
			{26, 62, -1, -1, 47, 2, 50, 50},
			{26, -1, -1, 61, 49, 2, 50, 50},
			{26, 120, 119, -1, 54, 2, 50, 50},
			{-1, -1, 113, -1, 54, 2, 50, 50},
			{42, 61, 107, -1, 54, 2, 65, 35},
			{42, 108, 101, -1, -1, 2, 50, 50},
			{42, 111, 95, -1, -1, 2, 65, 35},
			{-1, 97, 85, 120, -1, 2, 65, 35},
			{58, 87, 80, 116, -1, 2, 65, 35},
			{58, 81, 76, 112, -1, 2, 65, 35},
			{58, 75, 71, -1, -1, 2, 65, 35},
			{-1, 71, 99, -1, -1, 2, 50, 50},
			{50, 69, 95, -1, -1, 2, 50, 50},
			{50, 96, -1, -1, -1, 2, 35, 65},
			{50, 93, -1, -1, -1, 2, 50, 50},
			{-1, 90, -1, -1, -1, 2, 50, 50},
			{67, 86, -1, -1, -1, 2, 50, 50},
			{67, 83, -1, -1, -1, 2, 50, 50},
			{67, 112, -1, -1, 45, 2, 50, 50},
			{-1, 107, -1, -1, 45, 2, 50, 50},
			{43, 80, -1, -1, 45, 2, 50, 50},
			{43, -1, -1, -1, -1, 2, 50, 50},
			{43, 94, -1, 55, 47, 2, 50, 50},
			{-1, 90, -1, -1, 47, 2, 50, 50},
			{76, 87, -1, -1, 47, 2, 50, 50},
			{76, -1, -1, 56, 44, 2, 50, 50},
			{76, -1, 119, 56, 44, 2, 50, 50},
			{-1, -1, 109, 100, 44, 2, 50, 50},
			{59, -1, 102, 94, 44, 2, 35, 65},
			{59, -1, 97, 55, 43, 2, 50, 50},
			{59, -1, 96, 55, 48, 2, 35, 65},
			{-1, -1, 88, 79, 48, 2, 35, 65},
			{60, -1, 87, 74, 48, 2, 50, 50},

		// Long hallway, turn left (jennings)
			{-1, 67, -1, -1, 52, 1, 50, 50},
			{49, 66, -1, -1, 52, 1, 50, 50},
			{49, 67, -1, 60, 48, 1, 50, 50},
			{49, 67, -1, 60, 52, 1, 50, 50},
			{-1, 66, -1, -1, 52, 1, 50, 50},
			{49, 65, -1, -1, 52, 1, 50, 50},
			{49, 65, -1, 60, 52, 2, 50, 50},
			{49, 66, -1, 60, 52, 1, 50, 50},
			{-1, 67, -1, -1, 52, 2, 50, 50},
			{47, 81, -1, -1, 52, 2, 50, 50},
			{47, -1, -1, 59, 48, 1, 50, 50},
			{47, -1, -1, 60, 48, 2, 50, 50},
			{-1, -1, -1, 77, 48, 2, 50, 50},
			{55, -1, -1, 73, 51, 2, 50, 50},
			{55, -1, -1, 58, 51, 2, 50, 50},
			{55, -1, -1, 52, 45, 2, 35, 65},
			{-1, -1, 120, 65, 45, 2, 35, 65},
			{58, -1, 117, 50, 43, 2, 35, 65},
			{58, -1, 120, 50, 43, 2, 50, 50},
			{58, -1, 115, 55, 43, 2, 50, 50},
			{-1, -1, -1, 98, 43, 2, 50, 50},
			{58, -1, 108, 95, -1, 2, 50, 50},
			{58, -1, 104, 90, 42, 2, 50, 50},
			{58, -1, 100, 54, 42, 2, 35, 65},
			{-1, -1, 96, 47, 42, 2, 35, 65},
			{61, -1, -1, 84, 45, 2, 35, 65},
			{61, -1, -1, 52, 47, 2, 35, 65},
			{61, -1, -1, 71, 47, 2, 35, 65},
			{-1, -1, -1, 117, 47, 2, 50, 50},
			{42, 61, -1, 117, -1, 2, 50, 50},
			{42, 60, -1, 113, 66, 2, 50, 50},
			{42, 59, -1, 75, 66, 2, 50, 50},
			{-1, 58, -1, 108, 66, 2, 50, 50},
			{56, 77, -1, 101, 69, 2, 50, 50},
			{56, -1, -1, 76, 65, 2, 50, 50},
			{56, -1, -1, 90, 65, 2, 50, 50},
			{-1, -1, -1, 86, 65, 2, 50, 50},
			{55, 75, -1, 83, -1, 2, 50, 50},
			{55, -1, -1, 77, 51, 2, 50, 50},
			{55, -1, 120, 77, 51, 2, 50, 50},
			{-1, -1, 113, 69, 51, 2, 35, 65},
			{-1, 123, 107, 68, 62, 2, 35, 65},
			{-1, 108, 101, 74, 62, 2, 35, 65},
			{-1, 111, 94, 82, 62, 2, 35, 65},
			{-1, 105, 88, 76, 62, 2, 35, 65},
			{-1, -1, 82, 70, -1, 2, 35, 65},
			{-1, -1, 76, 65, 83, 2, 20, 80},
			{-1, -1, 70, 61, 83, 2, 20, 80},
			{-1, -1, 73, 62, 83, 2, 20, 80},
			{-1, -1, 76, 61, 55, 2, 20, 80},
			{-1, -1, 112, 63, 56, 2, 35, 65},
			{-1, -1, 108, 101, 56, 2, 50, 50},
			{-1, -1, -1, 97, 56, 2, 50, 50},
			{-1, -1, 81, 93, 53, 2, 50, 50},
			{-1, -1, 75, 93, 56, 2, 80, 20},
			{-1, 42, 68, 96, 56, 2, 80, 20},
			{-1, 36, 95, 87, 56, 2, 80, 20},
			{16, 35, -1, 63, 56, 2, 65, 35},
			{16, 90, -1, 59, 54, 2, 50, 50},
			{16, 87, 71, 55, 54, 2, 20, 80},
			{-1, -1, 71, 52, 54, 2, 35, 65},
			{67, -1, 115, 46, -1, 2, 20, 80},
			{67, 121, -1, 48, 47, 2, 35, 65},
			{67, 80, 107, -1, 47, 2, 50, 50},
			{-1, 74, 105, -1, 47, 2, 65, 35},
			{32, 52, 98, -1, 48, 2, 65, 35},
			{32, 49, 87, -1, 48, 2, 50, 50},
			{32, 58, 82, -1, 48, 2, 50, 50},
			{-1, 54, 82, -1, 48, 2, 50, 50},
			{33, 51, 76, -1, -1, 2, 50, 50},
			{33, 71, -1, -1, 51, 2, 50, 50},
			{33, 65, -1, -1, 51, 2, 50, 50},
			{-1, 63, -1, -1, 51, 2, 50, 50},
			{45, 55, -1, -1, 54, 2, 50, 50},
			{45, 49, -1, -1, 56, 2, 50, 50},
			{45, 49, -1, -1, 56, 2, 65, 35},
			{-1, 47, -1, -1, 56, 2, 65, 35},

		// In corner with open right - backup and manuver right - straight down hallway
			{-1, 6, 5, -1, -1, 0, 50, 50},
			{5, 6, 5, -1, -1, 0, 50, 50},
			{5, 6, 5, -1, -1, 0, 50, 50},
			{5, 6, 5, -1, -1, 0, 50, 50},
			{-1, 6, 5, -1, -1, -1, 50, 50},
			{5, 6, 5, -1, -1, -1, 50, 50},
			{5, 6, 5, -1, -1, -1, 50, 50},
			{5, 6, 5, -1, -1, -1, 50, 50},
			{-1, 6, 5, -1, -1, -1, 50, 50},
			{5, 6, 5, -1, -1, -1, 50, 50},
			{5, 6, 5, -1, -1, -2, 50, 50},
			{5, 6, 5, -1, -1, -1, 50, 50},
			{-1, 6, 5, -1, -1, -2, 50, 50},
			{5, 6, 5, -1, -1, -2, 50, 50},
			{5, 6, 5, -1, -1, -2, 50, 50},
			{5, 6, 5, -1, -1, -2, 50, 50},
			{-1, 9, 5, -1, -1, -2, 50, 50},
			{5, 10, 5, -1, -1, -2, 50, 50},
			{5, 11, 5, -1, -1, -2, 50, 50},
			{5, 12, 6, -1, -1, -2, 50, 50},
			{-1, 13, 8, -1, -1, -2, 50, 50},
			{7, 15, 9, -1, -1, -2, 50, 50},
			{7, 7, 10, -1, -1, -3, 50, 50},
			{7, 7, 12, -1, -1, -2, 50, 50},
			{-1, 8, 14, -1, -1, -3, 50, 50},
			{9, 11, 16, -1, -1, -2, 50, 50},
			{9, 14, 19, -1, -1, -2, 50, 50},
			{9, 16, 21, -1, -1, -3, 50, 50},
			{-1, 17, 12, -1, -1, -3, 50, 50},
			{9, 25, 13, -1, -1, -2, 50, 50},
			{9, 20, 15, -1, -1, -1, 50, 50},
			{9, 23, 18, -1, -1, 0, 50, 50},
			{-1, 26, 21, -1, -1, 0, 50, 50},
			{8, 28, 22, -1, -1, 0, 50, 50},
			{8, 28, 22, -1, -1, 0, 80, 20},
			{8, 28, 22, -1, 122, 0, 80, 20},
			{-1, 28, 22, -1, 122, 0, 95, 5},
			{8, 28, 22, -1, 122, 0, 95, 5},
			{8, 28, 22, -1, -1, 0, 95, 5},
			{8, 28, 22, -1, 121, 0, 95, 5},
			{-1, 28, 22, -1, 121, 0, 95, 5},
			{8, 28, 22, -1, 121, 1, 95, 5},
			{8, 28, 22, -1, 121, 1, 95, 5},
			{8, 27, 22, -1, 121, 1, 95, 5},
			{-1, 27, 21, -1, 121, 1, 95, 5},
			{9, 26, 22, -1, 121, 1, 95, 5},
			{9, 27, 22, -1, -1, 1, 95, 5},
			{9, 26, 22, -1, 121, 1, 95, 5},
			{-1, 27, 22, -1, 121, 1, 95, 5},
			{9, 27, 21, -1, 121, 1, 95, 5},
			{9, 27, 21, -1, 121, 2, 95, 5},
			{9, 27, 22, -1, 121, 2, 95, 5},
			{-1, 26, 22, -1, 121, 2, 95, 5},
			{10, 24, 20, -1, 121, 2, 95, 5},
			{10, 23, 29, -1, -1, 2, 95, 5},
			{10, 30, 25, -1, -1, 2, 95, 5},
			{-1, 27, -1, -1, -1, 1, 80, 20},
			{8, 26, -1, -1, -1, 2, 95, 5},
			{8, 26, -1, -1, -1, 2, 95, 5},
			{8, -1, -1, -1, 26, 1, 80, 20},
			{-1, -1, -1, -1, 26, 2, 50, 50},
			{-1, 123, -1, -1, 26, 2, 20, 80},
			{-1, -1, -1, 71, -1, 1, 5, 95},
			{-1, -1, -1, 77, 24, 1, 5, 95},
			{-1, 100, -1, -1, 24, 1, 20, 80},
			{80, 98, -1, -1, 24, 1, 50, 50},
			{80, 98, -1, -1, 71, 2, 50, 50},
			{80, 97, -1, -1, 71, 2, 50, 50},
			{-1, 97, -1, -1, 71, 1, 50, 50},
			{36, 94, -1, -1, 71, 1, 50, 50},
			{36, 92, -1, -1, 74, 1, 35, 65},
			{36, 89, -1, -1, -1, 1, 50, 50},
			{-1, 87, 84, -1, -1, 1, 50, 50},
			{39, 59, 82, -1, -1, 1, 65, 35},
			{39, 86, 82, -1, -1, 1, 65, 35},
			{39, 86, 82, -1, -1, 2, 65, 35},
			{-1, 85, 81, -1, -1, 1, 65, 35},
			{39, 59, 81, -1, -1, 1, 65, 35},
			{39, 83, 79, -1, -1, 2, 65, 35},
			{39, 82, 79, -1, -1, 1, 65, 35},
			{-1, 81, 79, -1, -1, 1, 50, 50},
			{40, 61, -1, -1, -1, 2, 50, 50},
			{40, 78, -1, -1, -1, 1, 50, 50},
			{40, 77, -1, -1, -1, 2, 50, 50},
			{-1, 76, -1, -1, -1, 2, 35, 65},
			{42, 74, -1, -1, -1, 1, 50, 50},
			{42, 72, -1, -1, -1, 2, 50, 50},
			{42, 71, -1, -1, -1, 2, 65, 35},
			{-1, 70, -1, -1, -1, 2, 80, 20},
			{41, 69, -1, -1, -1, 2, 65, 35},
			{41, 67, -1, -1, -1, 2, 50, 50},
			{41, 113, -1, -1, -1, 2, 35, 65},
			{-1, 109, -1, -1, -1, 2, 20, 80},
			{63, 106, -1, -1, -1, 2, 20, 80},
			{63, 102, -1, -1, -1, 2, 50, 50},
			{63, 99, -1, 68, 56, 2, 50, 50},
			{-1, 97, -1, -1, 56, 2, 65, 35},
			{25, 43, -1, -1, 56, 2, 65, 35},
			{25, 42, 77, -1, -1, 2, 65, 35},
			{25, 89, 72, -1, 66, 2, 50, 50},
			{-1, 78, 73, -1, 66, 2, 65, 35},
			{40, 69, 69, -1, 66, 2, 65, 35},
			{40, 71, 66, -1, -1, 2, 65, 35},
			{40, 68, -1, 77, 69, 1, 50, 50},
			{-1, -1, -1, -1, 69, 2, 50, 50},
			{56, 65, -1, -1, 69, 1, 50, 50},
			{56, -1, -1, 78, 69, 1, 50, 50},
			{56, -1, -1, 78, 69, 2, 80, 20},
			{-1, -1, -1, 119, 69, 1, 80, 20},
			{37, 59, -1, 118, 69, 1, 80, 20},
			{37, -1, -1, 117, -1, 2, 50, 50},
			{37, -1, -1, 77, 69, 1, 35, 65},
			{-1, -1, -1, 98, 69, 2, 35, 65},
			{57, -1, -1, 106, 69, 2, 35, 65},
			{57, -1, -1, 71, 63, 1, 35, 65},
			{57, -1, -1, 75, 63, 2, 50, 50},
			{-1, -1, -1, 108, 63, 2, 50, 50},
			{38, 57, -1, 107, 63, 2, 65, 35},
			{38, -1, -1, 107, -1, 2, 65, 35},
			{38, -1, -1, 75, 63, 2, 50, 50},
			{-1, 77, -1, 68, 63, 2, 50, 50},
			{41, -1, -1, 67, 63, 2, 50, 50},
			{41, -1, 100, 65, -1, 2, 50, 50},
			{41, -1, 96, 63, 58, 2, 50, 50},
			{-1, -1, 88, 62, 58, 2, 50, 50},
			{48, -1, 89, 60, 58, 2, 50, 50},

		// In corner open left - backup and turn left - slow throught hallway
			{17, 36, 6, 10, 6, -1, 50, 50},
			{17, 36, 6, 10, 6, -1, 50, 50},
			{17, 35, 6, 8, 6, -1, 50, 50},
			{-1, 36, 6, 10, 6, -2, 50, 50},
			{18, 36, 6, 10, 6, -2, 50, 50},
			{18, 35, 7, 8, 6, -2, 50, 50},
			{18, 35, 6, 8, 6, -2, 50, 50},
			{-1, 36, 7, 11, 6, -2, 50, 50},
			{17, 36, 7, 11, 6, -2, 50, 50},
			{17, 36, 8, 12, 7, -2, 50, 50},
			{17, 36, 9, 12, 7, -2, 50, 50},
			{-1, 37, 10, 8, 7, -2, 50, 50},
			{21, 37, 12, 10, 7, -2, 50, 50},
			{21, 38, 14, 11, 7, -2, 50, 50},
			{21, 39, 15, 12, 7, -2, 50, 50},
			{-1, 40, 17, 14, 7, -2, 50, 50},
			{24, 41, 19, 17, 7, -2, 50, 50},
			{24, 43, 22, 14, 7, -2, 50, 50},
			{24, 44, 25, 14, 7, -2, 50, 50},
			{-1, 46, 27, 24, 7, -2, 50, 50},
			{73, 48, 30, 26, 7, -1, 50, 50},
			{73, 51, 34, 14, 7, 0, 50, 50},
			{73, 52, 36, 14, 7, 0, 50, 50},
			{-1, 54, 39, 36, 7, 0, 50, 50},
			{76, 56, 40, 36, 7, 0, 50, 50},
			{76, 55, 40, 15, 7, 0, 35, 65},
			{76, 55, 40, 15, 7, 0, 20, 80},
			{-1, 55, 40, 36, 7, 0, 5, 95},
			{76, 57, 40, 14, 7, 0, 5, 95},
			{76, 55, 40, 15, 7, 0, 5, 95},
			{76, 55, 40, 36, 7, 0, 5, 95},
			{-1, 55, 40, 36, 7, 1, 5, 95},
			{76, 55, 40, 36, 7, 1, 5, 95},
			{76, 55, 40, 15, 7, 1, 5, 95},
			{76, 55, 40, 34, 7, 1, 5, 95},
			{-1, 54, 39, 34, 7, 1, 5, 95},
			{76, 54, 39, 15, 7, 1, 5, 95},
			{76, 54, 39, 15, 7, 1, 5, 95},
			{76, 54, 39, 35, 7, 1, 5, 95},
			{-1, 54, 39, 35, 7, 1, 5, 95},
			{75, 54, 39, 15, 8, 1, 5, 95},
			{75, 56, 39, 16, 8, 1, 5, 95},
			{75, 59, 37, 32, 8, 1, 5, 95},
			{-1, 53, 37, 32, 8, 1, 5, 95},
			{74, 53, 37, 32, 9, 1, 5, 95},
			{74, 52, 37, 31, 10, 1, 5, 95},
			{74, 56, 38, 29, 10, 2, 5, 95},
			{-1, 57, 38, 33, 10, 1, 5, 95},
			{-1, 57, 38, 29, 28, 2, 5, 95},
			{-1, 87, 42, 31, 28, 1, 5, 95},
			{-1, 85, 41, 30, 28, 2, 5, 95},
			{-1, 87, 40, 30, 28, 2, 5, 95},
			{-1, 86, 45, 30, 24, 1, 5, 95},
			{-1, -1, 72, 33, 24, 2, 5, 95},
			{-1, -1, 73, 32, 24, 2, 35, 65},
			{-1, -1, 73, 32, 24, 1, 50, 50},
			{-1, -1, 75, 62, 30, 2, 50, 50},
			{-1, -1, 66, 58, 30, 2, 50, 50},
			{-1, -1, 66, 55, 30, 1, 35, 65},
			{-1, -1, 66, 53, 30, 2, 35, 65},
			{-1, -1, 65, 53, -1, 2, 20, 80},
			{-1, -1, 65, 51, 29, 1, 20, 80},
			{-1, -1, -1, 49, 29, 2, 35, 65},
			{-1, -1, -1, 54, 29, 2, 35, 65},
			{114, -1, -1, 59, 46, 1, 35, 65},
			{114, -1, -1, -1, 45, 1, 50, 50},
			{114, -1, -1, -1, 45, 1, 50, 50},
			{-1, -1, -1, -1, 45, 1, 65, 35},
			{113, -1, -1, -1, -1, 2, 80, 20},
			{113, -1, -1, 122, 45, 2, 80, 5},
			{113, -1, -1, 114, 45, 2, 95, 5},
			{-1, -1, 120, 110, 45, 2, 80, 35},
			{116, -1, -1, 52, 45, 2, 65, 50},
			{116, -1, -1, 50, 45, 2, 50, 80},
			{116, 74, 105, 50, 45, 2, 20, 80},
			{-1, -1, 101, 49, 45, 1, 20, 80},
			{-1, -1, 106, 49, 43, 2, 20, 80},
			{-1, -1, -1, 54, 46, 2, 20, 80},
			{-1, -1, -1, 90, 46, 2, 35, 65},
			{-1, -1, -1, 94, 46, 2, 50, 35},
			{-1, -1, -1, 93, 37, 2, 65, 35},
			{-1, -1, -1, 56, 36, 1, 65, 35},
			{-1, -1, 123, 83, 36, 2, 65, 50},
			{-1, 119, 120, 80, 36, 2, 50, 65},
			{-1, 116, 84, 76, 35, 1, 35, 65},
			{-1, 113, 81, 45, 37, 2, 35, 65},
			{-1, 111, 79, 68, 37, 2, 35, 65},
			{-1, 78, 78, 69, 37, 1, 35, 50},
			{59, 107, 107, 68, 39, 2, 50, 50},
			{59, 58, 103, 66, 40, 2, 50, 50},
			{59, 56, 100, 64, 40, 2, 50, 50},
			{-1, 56, 96, 61, 40, 2, 50, 50},
			{36, 55, 93, 59, 43, 2, 50, 50},
			{36, 54, -1, 58, 44, 2, 50, 35},
			{36, 53, 123, 58, 44, 2, 65, 50},
			{-1, 52, 82, 56, 44, 2, 50, 35},
			{33, 52, 73, 56, 49, 2, 65, 50},
			{33, 73, 106, 59, 47, 2, 50, 50},
			{33, 69, 102, 53, 47, 2, 50, 50},
			{-1, 66, -1, -1, 47, 2, 50, 65},
			{50, 65, -1, 54, 44, 2, 35, 65},
			{50, 64, -1, 52, 46, 2, 35, 65},
			{50, 91, -1, -1, 46, 2, 35, 50},
			{54, 75, -1, -1, 46, 2, 50, 50},
			{54, 55, 84, -1, 47, 1, 50, 50},
			{54, 77, -1, -1, 48, 2, 50, 50},
			{-1, 72, -1, -1, 48, 2, 50, 50},
			{50, 70, -1, -1, 48, 1, 65, 35},
			{50, 67, 66, -1, 49, 2, 50, 50},
			{50, 67, -1, -1, 50, 2, 50, 50},
			{-1, 65, -1, -1, 50, 1, 50, 50},
			{45, 63, -1, -1, 50, 2, 50, 50},
			{45, 58, -1, 57, 46, 2, 50, 50},
			{45, 55, -1, 57, 46, 2, 50, 50},
			{-1, 54, -1, -1, 46, 2, 50, 50},
			{52, 72, -1, -1, 46, 2, 50, 50},
			{52, -1, -1, 57, 44, 2, 50, 50},
			{52, -1, -1, 57, 44, 2, 35, 65},
			{-1, -1, -1, -1, 44, 2, 35, 65},
			{50, -1, -1, -1, 44, 2, 35, 65},
			{50, -1, -1, 56, 49, 2, 35, 65},
			{50, -1, -1, -1, 49, 2, 50, 50},
			{-1, -1, -1, -1, 49, 2, 50, 50},
			{45, 65, -1, -1, 49, 2, 50, 50},
			{45, 45, -1, 115, 52, 2, 65, 35},
			{45, 44, -1, 110, 53, 2, 65, 35},
			{-1, -1, -1, 107, 53, 2, 65, 35},
			{24, 61, 111, 98, 53, 2, 50, 50},
			{24, -1, 106, 93, -1, 2, 50, 50},
			{24, -1, 97, 60, 48, 2, 50, 50},
			{-1, -1, 91, 54, 48, 2, 50, 50},
			{45, -1, 92, 52, 48, 2, 35, 65},
			{45, -1, 87, 51, 45, 2, 35, 65},
			{45, -1, 82, 50, 44, 2, 35, 65},
			{-1, -1, 78, 65, 44, 2, 35, 65},
			{47, -1, -1, 66, 44, 1, 50, 50},
			{47, -1, -1, 63, 49, 2, 65, 35},
			{47, 119, -1, 69, 52, 2, 65, 35},
			{-1, -1, -1, -1, 52, 1, 65, 35},
			{43, 63, -1, -1, 52, 2, 65, 35},
			{43, 123, -1, 66, 55, 2, 50, 50},
			{43, -1, -1, 67, 57, 2, 50, 50},
			{-1, -1, -1, -1, 57, 2, 50, 50},
			{43, 63, -1, -1, 57, 2, 50, 50},
			{43, -1, -1, 66, -1, 2, 50, 50},
			{43, -1, -1, 64, 54, 2, 35, 65},
			{-1, -1, -1, 62, 54, 2, 35, 65},
			{43, -1, -1, 59, 54, 2, 35, 65},
			{43, -1, -1, 59, 49, 2, 50, 50},
			{43, 123, -1, 61, 49, 2, 50, 50},
			{-1, -1, -1, -1, 49, 2, 50, 50},
			{23, 61, 123, -1, 49, 2, 50, 50},
			{23, 120, 118, 63, 51, 2, 65, 35},
			{23, 119, 113, 64, 51, 2, 50, 50},
			{-1, 108, 108, -1, 51, 2, 50, 50},
			{40, 60, -1, -1, 51, 2, 50, 50},
			{40, 98, -1, 57, 51, 2, 50, 50},
			{40, 94, -1, 57, 50, 2, 50, 50},
			{-1, 90, -1, 56, 50, 1, 50, 50},
			{42, 86, -1, 54, 50, 2, 50, 50},
			{42, 81, -1, 53, 47, 2, 35, 65},
			{42, 79, -1, 52, 46, 1, 35, 65},
			{-1, 77, -1, 51, 46, 2, 50, 50},
			{46, 75, 121, 50, 46, 2, 50, 50},
			{46, 72, 118, 50, 44, 2, 50, 50},
			{46, 70, 115, 50, 43, 2, 50, 50},
			{-1, 68, 109, 49, 43, 2, 50, 50},
			{48, 67, 106, -1, 43, 2, 50, 50},
			{48, 95, 103, 63, 49, 2, 50, 50},
			{48, 92, 100, 60, 49, 1, 50, 50}
		};
	
	public static void run() {
		
		boolean[][] active = { // last column is bias!
			{ true, true, true, true, true, true, false, false }, // first one should always be true
			{ true, true, true, true, true, true, true, true },
			{ true, true, true, true, true, true, true, true },
			{ true, true, true, true, true, true, true, true },
			{ true, true, true, false, false, false, false, false } // last one should only have three true
		};
		
		double[][][] weights = new double[active.length-1][active[0].length][active[0].length-1];
		weights = randomInit(weights, active);
		
		double[][] outputs = new double[active.length][active[0].length]; // allows storage of past calcuations
		double[][] error = new double[weights.length][weights[0].length];
		int i, j, k, epoch, numberOfCycles = trainingData.length * 3;
		double learningRate = 0.5d, curError, tempDiff;
		
		
		for (i = 0; i < trainingData.length; i++) {
			trainingData[i][0] = capper( ( (trainingData[i][0] < 0) ? 100 : trainingData[i][0]) / 100.0, 1.0, 0.0 ) ;
			trainingData[i][1] = capper( ( (trainingData[i][1] < 0) ? 100 : trainingData[i][1]) / 100.0, 1.0, 0.0 ) ;
			trainingData[i][2] = capper( ( (trainingData[i][2] < 0) ? 100 : trainingData[i][2]) / 100.0, 1.0, 0.0 ) ;
			trainingData[i][3] = capper( ( (trainingData[i][3] < 0) ? 100 : trainingData[i][3]) / 100.0, 1.0, 0.0 ) ;
			trainingData[i][4] = capper( ( (trainingData[i][4] < 0) ? 100 : trainingData[i][4]) / 100.0, 1.0, 0.0 ) ;
			trainingData[i][5] = capper( trainingData[i][5] * 6 - 3 , -3.0 , 3.0 ); // [-3,3]
			trainingData[i][6] = capper( trainingData[i][6] * 100 , 0.0 , 100.0 );  // [0:100]
			trainingData[i][7] = capper( trainingData[i][7] * 100 , 0.0 , 100.0 );  // [0:100]
		}
		
		// -------------------------------------------------------
		// |                     BEGIN EPOCH                     |
		// -------------------------------------------------------
		
		for (epoch = 0; epoch < numberOfCycles; epoch++) {

			outputs[0][0] = trainingData[epoch % trainingData.length][0];
			outputs[0][1] = trainingData[epoch % trainingData.length][1];
			outputs[0][2] = trainingData[epoch % trainingData.length][2];
			outputs[0][3] = trainingData[epoch % trainingData.length][3];
			outputs[0][4] = trainingData[epoch % trainingData.length][4];
			
			for (i = 0; i < outputs.length; i++) outputs[i][outputs[0].length-1] = 1.0; // setup biases
			
			// -------------------------------------------------------
			// |                    QUERY NEURONS                    |
			// -------------------------------------------------------
			
			// looping through the layers
			for ( i = 0; i < weights.length; i++ ) {
				
				// loop through rows of output
				for ( j = 0; j < weights[0].length; j++ ) {
					if ( active[i+1][j] ) {
						for ( k = 0; k < weights[0][0].length; k++ ) if ( active[i][k] ) outputs[i+1][j] += outputs[i][k] * weights[i][j][k]; // sum rows
						
						outputs[i+1][j] = sigmoid( outputs[i+1][j] , 0 /*ofset[i][j]*/); // perform threshold on sums
					}
				}
			}
			
			// scaling outputs of network - for actual use of neural network
			//outputs[i][0] = capper( outputs[i][0] * 6 - 3 , -3.0 , 3.0 ); // [-3,3]
			//outputs[i][1] = capper( outputs[i][1] * 100 , 0.0 , 100.0 );  // [0:100]
			//outputs[i][2] = capper( outputs[i][2] * 100 , 0.0 , 100.0 );  // [0:100]
			
			// -------------------------------------------------------
			// |                   BACKPROPAGATION                   |
			// -------------------------------------------------------
			
			i = weights.length; // moving backward through layers
			curError = 0.0;
			
			// output error!
			error = new double[weights.length][weights[0].length]; // clear error to zeros
			for ( j = 0; j < weights[0].length; j++ ) {
				if ( active[i][j] ) {
					tempDiff = (trainingData[epoch % trainingData.length][5+j] - outputs[i][j]);
					error[i-1][j] = outputs[i][j] * ( 1 - outputs[i][j] ) * tempDiff;
					curError += Math.pow(tempDiff, 2);
				}
			}
			
			// Display current calculated error
			System.out.println("Epoch: " + (epoch+1) + "\tOutput Error: " + curError);
			
			// new weights for output layer
			for ( j = 0; j < weights[0].length; j++ ) {
				if ( active[i][j] ) {
					for ( k = 0; k < weights[0][0].length; k++ ) {
						if (active[i-1][k]) {
							weights[i-1][j][k] += outputs[i-1][k] * error[i-1][j] * learningRate;
						}
					}
				}
			}
			
			// change weights for hidden layers
			for (i--; i > 0 ; i--) {
				
				//calculate errors in hidden layers
				for ( j = 0; j < weights[0].length-1; j++ ) {
					if ( active[i][j] ) {
						for ( k = 0; k < weights[0][0].length; k++ ) { // fix possible error with -1 might want to verify
							if (active[i+1][k]) {
								error[i-1][j] += error[i][k] * weights[i][k][j];
							}
						}
						error[i-1][j] *= ( 1 - outputs[i][j] ) * outputs[i][j];
					}
				}
				
				// calculate new layer weights
				for ( j = 0; j < weights[0].length; j++ ) {
					if ( active[i][j] ) {
						for ( k = 0; k < weights[0][0].length; k++ ) {
							if (active[i][k]) {
								weights[i-1][j][k] += error[i-1][j] * outputs[i-1][k] * learningRate;
							}
						}
					}
				}
			}
		}
		
		printWeights(weights);
	}
	
	public static double sigmoid( double x , double thresh ) { return 1.0 / ( 1.0 + Math.exp(thresh-x) ); }
	public static double capper(double value, double max, double min) {	return (value > max) ? max : (value < min) ? min : value ; }
	public static double[][][] randomInit(double[][][] in, boolean[][] act) {
		for (int i = 0; i < in.length; i++)
			for (int j = 0; j < in[0].length; j++) {
				if (act[i+1][j])
				for (int k = 0; k < in[0][0].length; k++)
					if (act[i][k])
						in[i][j][k] = Math.random();
			}
		return in;
	}
	public static void printWeights(double[][][] weights){
		// Output new weights in a usable format - yes its formatted java
		System.out.println("\n[Weight Matrix]\n\ndouble[][][] weights = {");
		for (int i = 0; i < weights.length; i++) {
			System.out.print("\t{\n");
			for (int j = 0; j < weights[0].length; j++) {
				System.out.print("\t\t{");
				for (int k = 0; k < weights[0][0].length; k++) {
					System.out.print(weights[i][j][k] + "");
					if (k != weights[0][0].length - 1) System.out.print(", ");
				}
				System.out.print("}");
				if (j != weights[0].length - 1) System.out.print(",");
				System.out.println();
			}
			System.out.print("\t}");
			if (i != weights.length - 1) System.out.print(",");
			System.out.println();
		}
		System.out.println("};");
	}
	public static void main(String[] vars) { run(); }
}
